if (typeof(ComboxManagers) == "undefined") {
	ComboxManagers = new Object()
}
(function($) {
	MANAGER_COMBOXTREE_KEY_PREFIX = "comboxtree.";
	$.fn.comboxtree = function(options) {
		var opts = $.extend({}, $.fn.comboxtree.defaults, options);
		var comboxTreeSetting = {
			check : {
				enable : false
			},
			data : {
				key : {
					name : "text",
					children : "childs"
				}
			},
			view : {
				autoCancelSelected : false,
				selectedMulti : false
			},
			callback : {
				beforeClick : null,
				onClick : null,
				onCheck : null
			}
		};
		return this.each(function() {
			var $this = $(this);
			var p = {
				comboxW : eval($this.attr("comboxW") || 150),
				boxW : eval($this.attr("boxW") || 150),
				boxH : $this.attr("boxH") || 200,
				autoW : $this.attr("autoW") || "false",
				autoH : $this.attr("autoH") || "false",
				prompt : $this.attr("prompt") || "",
				isRequired : eval($this.hasClass("required") || false),
				validTitle : $this.attr("validTitle") || "",
				isDisable : ($this.attr("disabled") == "disabled"),
				isMulti : eval($this.attr("multiMode") || false),
				data : $this.attr("data"),
				url : $this.attr("link"),
				childId : $this.attr("childId"),
				datasrc : "param",
				value : $this.attr("value"),
				textRenderTo : $this.attr("textRenderTo") || "",
				valRenderTo : $this.attr("valRenderTo") || "",
				valTreeProp : $this.attr("valTreeProp") || "id",
				onlyLeaf : eval($this.attr("onlyLeaf") || false),
				onchange : $this.attr("onchange") || null,
				treeSetting : comboxTreeSetting
			};
			var noRepeatFlag = generateIndex(1);
			var tableId = "selectTree" + noRepeatFlag + "_table";
			var selectBoxId = "selectTree" + noRepeatFlag + "_input";
			var selectBtnId = "selectTree" + noRepeatFlag + "_button";
			var containerId = "selectTree" + noRepeatFlag + "_container";
			var hiddenId = "selectTree" + noRepeatFlag + "_hidden";
			var zTreeId = "selectTree" + noRepeatFlag + "_tree";
			var tableTag = '<table id="'
					+ tableId
					+ '" class="select-tree-table" cellspacing="0" cellpadding="0" style="border-style: none;"><tbody><tr><td style="border-style:none;padding:0pt;margin:0pt;text-align:left"><input type="text" id="'
					+ selectBoxId
					+ '" name="'
					+ p.textRenderTo
					+ '" class="selectbox'
					+ (p.isDisable ? " inputDisabled selectbox_disabled" : "")
					+ '" autocomplete="off" readonly="readonly" style="width:'
					+ (p.comboxW - 24)
					+ 'px;cursor:pointer;"><td style="border-style:none;padding:0pt;margin:0pt;text-align:left;'
					+ (p.isDisable ? "disabled:disabled;" : "")
					+ '"><input type="button" class="selBtn'
					+ (p.isDisable ? (p.isMulti
							? " selBtn_disabledMulti"
							: " selBtn_disabled") : (p.isMulti
							? " selBtnMulti "
							: "")) + '" id="' + selectBtnId + '" '
					+ (p.isDisable ? 'style="disabled:disabled;"' : "")
					+ "></td></tr></tbody></table>";
			var treeContainer = '<div id="'
					+ containerId
					+ '" class="selectbox-tree" hasfocus="0" style="display:none;overflow-y:auto;overflow-x:hidden;'
					+ (p.autoW === "true"
							? ("min-width:" + (Math.max(p.comboxW, p.boxW) - 1) + "px;")
							: ("width:" + (Math.max(p.comboxW, p.boxW) - 1) + "px;"))
					+ (p.autoH === "true" ? "" : ("height:" + (p.boxH) + "px;"))
					+ 'top:23px;"><ul class="ztree" id="' + zTreeId
					+ '"></ul></div>';
			var comboxDivHtml = tableTag
					+ treeContainer
					+ '<input type="hidden" id="'
					+ hiddenId
					+ '" name="'
					+ p.valRenderTo
					+ '" value="" '
					+ (p.isRequired ? ' class="required" validTitle="'
							+ p.validTitle + '" ' : "") + ">";
			$this.attr("relText", "").attr("relVal", "").addClass("maincon")
					.css({
								width : p.comboxW
							}).html(comboxDivHtml);
			var $table = $("#" + tableId);
			var $selectBox = $("#" + selectBoxId);
			var $selectBtn = $("#" + selectBtnId);
			var $container = $("#" + containerId);
			var $hidden = $("#" + hiddenId);
			var $ztree = $("#" + zTreeId);
			comboxTreeSetting.check.enable = p.isMulti;
			if (p.onlyLeaf) {
				comboxTreeSetting.view.dblClickExpand = false;
				comboxTreeSetting.callback.beforeClick = function(treeId,
						treeNode, clickFlag) {
					if (treeNode == null) {
						return false
					}
					if (treeNode.isParent) {
						var zTreeObj = $.fn.zTree.getZTreeObj(treeId);
						zTreeObj.expandNode(treeNode, !(treeNode.open), false,
								false);
						return false
					}
				}
			} else {
				comboxTreeSetting.view.dblClickExpand = true;
				comboxTreeSetting.callback.beforeClick = false
			}
			comboxTreeSetting.callback.onClick = function(event, treeId,
					treeNode, clickFlag) {
				if (p.isMulti) {
					var zTreeObj = $.fn.zTree.getZTreeObj(treeId);
					zTreeObj.cancelSelectedNode(treeNode);
					zTreeObj
							.checkNode(treeNode, !treeNode.checked, true, false);
					treeNodeCheckedAction(zTreeObj, $this, $selectBox, $hidden,
							p)
				} else {
					var treeNodeText = treeNode.text;
					var treeNodeValue = treeNode[p.valTreeProp];
					$selectBox.attr("title", treeNodeText).val(treeNodeText);
					$hidden.val(treeNodeValue);
					$this.attr("relText", treeNodeText).attr("relVal",
							treeNodeValue);
					hiddenComboxContainer($container);
					treeChangeEvent(treeNodeText, treeNodeValue, $hidden, p)
				}
			};
			if (p.isMulti) {
				comboxTreeSetting.callback.onCheck = function(event, treeId,
						treeNode) {
					var zTreeObj = $.fn.zTree.getZTreeObj(treeId);
					treeNodeCheckedAction(zTreeObj, $this, $selectBox, $hidden,
							p)
				}
			} else {
				comboxTreeSetting.callback.onCheck = false
			}
			var zTreeObj = initComboxTreeData(null, $this, $ztree, p);
			initComboxTreeDefaultValue(zTreeObj, $this, $selectBox, $hidden, p);
			$table.click(function(event) {
						if (event.stopPropagation) {
							event.stopPropagation()
						}
						$this.css("z-index", generateZIndex($this
												.css("z-index"), 2));
						hiddenComboxContainer($("div.comboxtree")
								.find("div.selectbox-tree").not($container));
						if (($this.attr("disabled") || "") == "disabled") {
							return false
						}
						toggleComboxTreeContainer($selectBox, $container)
					});
			if (this.id) {
				putComboxTree2Managers(this.id, {
							props : p,
							treeDivId : this.id,
							treeDivObj : $this,
							treeId : zTreeId,
							treeObj : zTreeObj,
							selectBoxId : selectBoxId,
							selectBoxObj : $selectBox,
							selectBtnId : selectBtnId,
							selectBtnObj : $selectBtn,
							container : $container,
							treeDomObj : $ztree,
							hiddenId : hiddenId,
							hiddenObj : $hidden
						})
			}
		})
	};
	function debug($obj) {
		if (window.console && window.console.log) {
			window.console.log("comboxtree selection count: " + $obj.size())
		}
	}
	function consoleLog(message) {
		if (window.console && window.console.log) {
			window.console.log(message)
		}
	}
	function initComboxTreeData(data, $treeDivObj, $treeDomObj, p) {
		var treeData = data || "[]";
		p.datasrc = "param";
		if (data == null || typeof(data) == "undefined") {
			data = p.data
		}
		if (data != null && typeof(data) != "undefined") {
			p.datasrc = "attr";
			treeData = data
		} else {
			if (p.url != null && typeof(p.url) != "undefined") {
				p.datasrc = "url";
				var paramValue = $treeDivObj.attr("paramValue");
				var url = p.url
						+ (typeof(paramValue) != "undefined" ? paramValue : "");
				$.ajax({
							type : "GET",
							url : url,
							dataType : "text",
							cache : false,
							async : false,
							success : function(data) {
								treeData = data
							},
							error : function(data) {
								consoleLog("AJAX方式初始化下拉树失败 " + data);
								return false
							}
						})
			}
		}
		p.treeSetting.check.enable = p.isMulti;
		return $.fn.zTree.init($treeDomObj, p.treeSetting, eval(treeData
						|| "[]"))
	}
	function initComboxTreeDefaultValue(zTreeObj, $treeDivObj, $selectBoxObj,
			$hiddenObj, p) {
		$selectBoxObj.attr("title", p.prompt).val(p.prompt);
		if (!zTreeObj || zTreeObj == null) {
			return false
		}
		var treeNodeText = "", treeNodeValue = "";
		if (p.isMulti) {
			zTreeObj.checkAllNodes(false);
			var chk_texts = [], chk_vals = [];
			values = p.value && p.value.indexOf(",") != -1
					? p.value.split(",")
					: [p.value];
			$.each(values, function(i, value) {
						var treeNode = zTreeObj.getNodeByParam(p.valTreeProp,
								value);
						if (treeNode != null) {
							if (!treeNode.isParent) {
								zTreeObj.checkNode(treeNode, true, true, false)
							}
							if (!(p.onlyLeaf && treeNode.isParent)) {
								chk_texts.push(treeNode.text);
								chk_vals.push(treeNode[p.valTreeProp])
							}
						}
					});
			treeNodeText = chk_texts.length > 0
					? chk_texts.join(",")
					: p.prompt;
			treeNodeValue = chk_vals.join(",")
		} else {
			var treeNode = zTreeObj.getNodeByParam(p.valTreeProp, p.value);
			if (treeNode && treeNode != null) {
				zTreeObj.selectNode(treeNode);
				treeNodeText = treeNode.text;
				treeNodeValue = treeNode[p.valTreeProp]
			} else {
				treeNodeText = p.prompt
			}
		}
		$treeDivObj.attr("relText", treeNodeText).attr("relVal", treeNodeValue);
		$selectBoxObj.attr("title", treeNodeText).val(treeNodeText);
		$hiddenObj.val(treeNodeValue);
		$hiddenObj.data("preVal", treeNodeValue)
	}
	function treeNodeCheckedAction(zTreeObj, $treeDivObj, $selectBoxObj,
			$hiddenObj, p) {
		if (zTreeObj == null) {
			return null
		}
		var chk_texts = [], chk_vals = [];
		var nodes = zTreeObj.getCheckedNodes(true);
		$.each(nodes, function(i, node) {
					var status = node.getCheckStatus();
					if (status.checked && !status.half
							&& !(p.onlyLeaf && node.isParent)) {
						chk_texts.push(node.text);
						chk_vals.push(node[p.valTreeProp])
					}
				});
		var treeNodeText = chk_texts.length > 0
				? chk_texts.join(",")
				: p.prompt;
		var treeNodeValue = chk_vals.join(",");
		$treeDivObj.attr("relText", treeNodeText).attr("relVal", treeNodeValue);
		$selectBoxObj.attr("title", treeNodeText).val(treeNodeText);
		$hiddenObj.val(treeNodeValue);
		treeChangeEvent(treeNodeText, treeNodeValue, $hiddenObj, p)
	}
	function hiddenComboxContainer($container) {
		$container.attr("hasfocus", 0).hide();
		$("div.selectbox-wrapper[hasfocus=1]").attr("hasfocus", 0).hide()
	}
	function toggleComboxTreeContainer($selectBox, $container) {
		var hasfocus = $container.attr("hasfocus");
		if (hasfocus == "1") {
			$container.attr("hasfocus", 0).hide()
		} else {
			var left = $selectBox.offset().left;
			var top = $selectBox.offset().top + 23;
			$container.css({
						left : left,
						top : top
					}).show().attr("hasfocus", 1)
		}
	}
	function putComboxTree2Managers(treeDivId, obj) {
		ComboxManagers[MANAGER_COMBOXTREE_KEY_PREFIX + treeDivId] = obj
	}
	function generateZIndex(zIndex, genNum) {
		var oldGenNum = ComboxManagers.zindex;
		if (typeof(oldGenNum) == "undefined") {
			ComboxManagers.zindex = oldGenNum = 30
		}
		if (parseInt(zIndex) < parseInt(oldGenNum)) {
			var newGenNum = (parseInt(ComboxManagers.zindex) + parseInt(genNum));
			ComboxManagers.zindex = newGenNum;
			return newGenNum
		} else {
			return zIndex
		}
	}
	function generateIndex(step) {
		var oldIndex = ComboxManagers.index;
		if (typeof(oldIndex) == "undefined") {
			ComboxManagers.index = 0
		}
		var newIndex = (parseInt(ComboxManagers.index) + parseInt(step));
		ComboxManagers.index = newIndex;
		return newIndex
	}
	function treeChangeEvent(treeNodeText, treeNodeValue, $hiddenObj, p) {
		var isHiddenValueChanged = !($hiddenObj.data("preVal") == treeNodeValue);
		$hiddenObj.val(treeNodeValue);
		$hiddenObj.data("preVal", treeNodeValue);
		var changeEventFun = p.onchange;
		if (isHiddenValueChanged && changeEventFun
				&& $.isFunction(eval(changeEventFun))) {
			eval(changeEventFun + '("' + treeNodeText + '","' + treeNodeValue
					+ '")')
		}
		if (p.datasrc == "url") {
			if (p.childId == null || typeof(p.childId) == "undefined") {
				return false
			}
			var $childComboxTree = $("#" + p.childId);
			if ($childComboxTree.size() != 1) {
				return false
			}
			$childComboxTree.attr("paramValue", treeNodeValue);
			$.fn.comboxtree.reload(p.childId, null)
		}
	}
	function clearSelectBox(treeManager) {
		if (treeManager == null) {
			return false
		}
		var prompt = treeManager.props.prompt;
		treeManager.selectBoxObj.attr("title", prompt).val(prompt);
		treeManager.hiddenObj.val("");
		treeManager.hiddenObj.data("preVal", "");
		var childTreeId = treeManager.props.childId;
		if (childTreeId) {
			var childTreeObj = $.fn.comboxtree.getComboxManager(childTreeId);
			if (childTreeObj) {
				var $childComboxTree = $("#" + childTreeId);
				if ($childComboxTree.size() != 1) {
					return false
				}
				$childComboxTree.attr("paramValue", "");
				$.fn.comboxtree.reload(childTreeId, null)
			}
		}
	}
	$.fn.comboxtree.otherClickEventCombox = function(event) {
		var target = $(event.target);
		var targetClass = target.attr("class");
		var $treeContainer = $("div.comboxtree").find("div.selectbox-tree");
		if ($treeContainer.is(":visible") && targetClass != "selectbox-tree"
				&& $treeContainer.find(target).length == 0) {
			hiddenComboxContainer($treeContainer)
		}
	};
	$.fn.comboxtree.disable = function(treeDivId) {
		var treeManager = $.fn.comboxtree.getComboxManager(treeDivId);
		if (treeManager == null) {
			return false
		}
		treeManager.treeDivObj.attr("disabled", "disabled");
		treeManager.selectBoxObj.css("disabled", "disabled")
				.addClass("inputDisabled selectbox_disabled");
		treeManager.selectBtnObj.css("disabled", "disabled")
				.addClass(treeManager.props.isMulti
						? "selBtn_disabledMulti"
						: "selBtn_disabled")
	};
	$.fn.comboxtree.enable = function(treeDivId) {
		var treeManager = $.fn.comboxtree.getComboxManager(treeDivId);
		if (treeManager == null) {
			return false
		}
		treeManager.treeDivObj.removeAttr("disabled");
		treeManager.selectBoxObj.css("disabled", "")
				.removeClass("inputDisabled selectbox_disabled");
		var isMulti = treeManager.props.isMulti;
		treeManager.selectBtnObj.css("disabled", "").removeClass(isMulti
				? "selBtn_disabledMulti"
				: "selBtn_disabled");
		if (isMulti) {
			treeManager.selectBtnObj.addClass("selBtnMulti")
		}
	};
	$.fn.comboxtree.clearSelected = function(treeDivId) {
		var treeManager = $.fn.comboxtree.getComboxManager(treeDivId);
		if (treeManager == null) {
			return false
		}
		var prompt = treeManager.props.prompt;
		treeManager.selectBoxObj.attr("title", prompt).val(prompt);
		treeManager.hiddenObj.val("");
		treeManager.hiddenObj.data("preVal", "");
		var zTreeObj = treeManager.treeObj;
		if (treeManager.props.isMulti) {
			zTreeObj.checkAllNodes(false)
		} else {
			zTreeObj.cancelSelectedNode()
		}
	};
	$.fn.comboxtree.clear = function(treeDivId) {
		var treeManager = $.fn.comboxtree.getComboxManager(treeDivId);
		if (treeManager == null) {
			return false
		}
		clearSelectBox(treeManager);
		$.fn.zTree.init(treeManager.treeDomObj, treeManager.props.treeSetting,
				null)
	};
	$.fn.comboxtree.reload = function(treeDivId, data) {
		var treeManager = $.fn.comboxtree.getComboxManager(treeDivId);
		if (treeManager == null) {
			return false
		}
		clearSelectBox(treeManager);
		var zTreeObj = initComboxTreeData(data, treeManager.treeDivObj,
				treeManager.treeDomObj, treeManager.props);
		initComboxTreeDefaultValue(zTreeObj, treeManager.treeDivObj,
				treeManager.selectBoxObj, treeManager.hiddenObj,
				treeManager.props)
	};
	$.fn.comboxtree.setDefaultValue = function(treeDivId, defaultValue) {
		var treeManager = $.fn.comboxtree.getComboxManager(treeDivId);
		if (treeManager == null) {
			return false
		}
		if ((treeManager.treeDivObj.attr("disabled") || "") == "disabled") {
			return false
		}
		var zTreeObj = treeManager.treeObj;
		if (!zTreeObj || zTreeObj == null) {
			return false
		}
		var treeNodeText = "", treeNodeValue = "";
		var p = treeManager.props;
		if (p.isMulti) {
			zTreeObj.checkAllNodes(false);
			var chk_texts = [], chk_vals = [];
			values = defaultValue && defaultValue.indexOf(",") != -1
					? defaultValue.split(",")
					: [defaultValue];
			$.each(values, function(i, value) {
						var treeNode = zTreeObj.getNodeByParam(p.valTreeProp,
								value);
						if (treeNode != null) {
							if (!treeNode.isParent) {
								zTreeObj.checkNode(treeNode, true, true, false)
							}
							if (!(p.onlyLeaf && treeNode.isParent)) {
								chk_texts.push(treeNode.text);
								chk_vals.push(treeNode[p.valTreeProp])
							}
						}
					});
			treeNodeText = chk_texts.length > 0
					? chk_texts.join(",")
					: p.prompt;
			treeNodeValue = chk_vals.join(",")
		} else {
			var treeNode = zTreeObj.getNodeByParam(p.valTreeProp, defaultValue);
			if (treeNode && treeNode != null
					&& !(p.onlyLeaf = "true" && treeNode.isParent)) {
				zTreeObj.selectNode(treeNode);
				treeNodeText = treeNode.text;
				treeNodeValue = treeNode[p.valTreeProp]
			} else {
				treeNodeText = p.prompt
			}
		}
		treeManager.treeDivObj.attr("relText", treeNodeText).attr("relVal",
				treeNodeValue);
		treeManager.selectBoxObj.attr("title", treeNodeText).val(treeNodeText);
		treeManager.hiddenObj.val(treeNodeValue);
		treeChangeEvent(treeNodeText, treeNodeValue, treeManager.hiddenObj,
				treeManager.props)
	};
	$.fn.comboxtree.getComboxManager = function(treeDivId) {
		return ComboxManagers[MANAGER_COMBOXTREE_KEY_PREFIX + treeDivId]
	};
	$.fn.comboxtree.defaults = {}
})(jQuery);
$(document).click(function(a) {
			$.fn.comboxtree.otherClickEventCombox(a)
		});
$("div.comboxtree").livequery(function() {
			$(this).comboxtree()
		});